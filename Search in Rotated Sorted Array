class Solution {
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        //Case 1 when pivot is not found
        if(pivot == -1){
            return binarySearch(nums, target, 0, nums.length-1);
        }
        // Case 2 when pivot is equal to target
        if(nums[pivot]==target){
            return pivot;
        }
        //Case 3 when pivot is found 2 asc sorted arrays
        else if(target>=nums[0]){
            return binarySearch(nums, target, 0, pivot-1);
        }
        return binarySearch(nums, target, pivot+1, nums.length-1);
    }

        int binarySearch(int[] nums, int target, int start, int end){
            while(start<=end){
                int mid = start + (end-start)/2;
                if(target<nums[mid]){
                    end = mid-1;
                }
                else if(target>nums[mid]){
                    start = mid+1;
                }
                else{
                    return mid;
                }
            }
            return -1;
        }


        int findPivot(int[] nums){
            int start = 0;
            int end = nums.length-1;
            // 4 cases
            while(start<=end){
                int mid = start + (end-start)/2;
                //Case1 
                if(mid<end &&nums[mid]>nums[mid+1]){
                return mid;
                }
                //Case 2
                else if(mid>start && nums[mid]<nums[mid-1]){
                    return mid-1;
                }
                //Case 3
                else if(nums[start]>nums[mid]){
                    end =mid-1;
                }
                //Case 4
                else{
                    start = mid +1;
                }
            }
            return -1;
        }
}
